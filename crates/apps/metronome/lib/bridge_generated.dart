// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal
import 'dart:convert';
import 'dart:typed_data';

import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'dart:ffi' as ffi;

abstract class Metronome extends FlutterRustBridgeBase<MetronomeWire> {
  factory Metronome(ffi.DynamicLibrary dylib) =>
      MetronomeImpl.raw(MetronomeWire(dylib));

  Metronome.raw(MetronomeWire inner) : super(inner);

  Future<int> initialize({dynamic hint});

  Future<int> deinitialize({dynamic hint});

  Future<int> setIsPlaying({required bool value, dynamic hint});

  Future<int> setTempo({required double value, dynamic hint});

  Future<int> setVolume({required double value, dynamic hint});

  Future<int> setBeatsPerBar({required int value, dynamic hint});

  Stream<double> getPlayhead({dynamic hint});
}

// ------------------------- Implementation Details -------------------------

/// Implementations for Metronome. Prefer using Metronome if possible; but this class allows more
/// flexible customizations (such as subclassing to create an initializer, a logger, or
/// a timer).
class MetronomeImpl extends Metronome {
  MetronomeImpl.raw(MetronomeWire inner) : super.raw(inner);

  Future<int> initialize({dynamic hint}) => executeNormal(FlutterRustBridgeTask(
        callFfi: (port) => inner.wire_initialize(port),
        parseSuccessData: _wire2api_i32,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "initialize",
          argNames: [],
        ),
        argValues: [],
        hint: hint,
      ));

  Future<int> deinitialize({dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port) => inner.wire_deinitialize(port),
        parseSuccessData: _wire2api_i32,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "deinitialize",
          argNames: [],
        ),
        argValues: [],
        hint: hint,
      ));

  Future<int> setIsPlaying({required bool value, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port) => inner.wire_set_is_playing(port, value),
        parseSuccessData: _wire2api_i32,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "set_is_playing",
          argNames: ["value"],
        ),
        argValues: [value],
        hint: hint,
      ));

  Future<int> setTempo({required double value, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port) => inner.wire_set_tempo(port, _api2wire_f32(value)),
        parseSuccessData: _wire2api_i32,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "set_tempo",
          argNames: ["value"],
        ),
        argValues: [value],
        hint: hint,
      ));

  Future<int> setVolume({required double value, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port) => inner.wire_set_volume(port, _api2wire_f32(value)),
        parseSuccessData: _wire2api_i32,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "set_volume",
          argNames: ["value"],
        ),
        argValues: [value],
        hint: hint,
      ));

  Future<int> setBeatsPerBar({required int value, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port) =>
            inner.wire_set_beats_per_bar(port, _api2wire_i32(value)),
        parseSuccessData: _wire2api_i32,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "set_beats_per_bar",
          argNames: ["value"],
        ),
        argValues: [value],
        hint: hint,
      ));

  Stream<double> getPlayhead({dynamic hint}) =>
      executeStream(FlutterRustBridgeTask(
        callFfi: (port) => inner.wire_get_playhead(port),
        parseSuccessData: _wire2api_f32,
        constMeta: const FlutterRustBridgeTaskConstMeta(
          debugName: "get_playhead",
          argNames: [],
        ),
        argValues: [],
        hint: hint,
      ));

  // Section: api2wire
  int _api2wire_bool(bool raw) {
    return raw ? 1 : 0;
  }

  double _api2wire_f32(double raw) {
    return raw;
  }

  int _api2wire_i32(int raw) {
    return raw;
  }

  // Section: api_fill_to_wire

}

// Section: wire2api
double _wire2api_f32(dynamic raw) {
  return raw as double;
}

int _wire2api_i32(dynamic raw) {
  return raw as int;
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class MetronomeWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  MetronomeWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  MetronomeWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void wire_initialize(
    int port_,
  ) {
    return _wire_initialize(
      port_,
    );
  }

  late final _wire_initializePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_initialize');
  late final _wire_initialize =
      _wire_initializePtr.asFunction<void Function(int)>();

  void wire_deinitialize(
    int port_,
  ) {
    return _wire_deinitialize(
      port_,
    );
  }

  late final _wire_deinitializePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_deinitialize');
  late final _wire_deinitialize =
      _wire_deinitializePtr.asFunction<void Function(int)>();

  void wire_set_is_playing(
    int port_,
    bool value,
  ) {
    return _wire_set_is_playing(
      port_,
      value ? 1 : 0,
    );
  }

  late final _wire_set_is_playingPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint8)>>(
          'wire_set_is_playing');
  late final _wire_set_is_playing =
      _wire_set_is_playingPtr.asFunction<void Function(int, int)>();

  void wire_set_tempo(
    int port_,
    double value,
  ) {
    return _wire_set_tempo(
      port_,
      value,
    );
  }

  late final _wire_set_tempoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Float)>>(
          'wire_set_tempo');
  late final _wire_set_tempo =
      _wire_set_tempoPtr.asFunction<void Function(int, double)>();

  void wire_set_volume(
    int port_,
    double value,
  ) {
    return _wire_set_volume(
      port_,
      value,
    );
  }

  late final _wire_set_volumePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Float)>>(
          'wire_set_volume');
  late final _wire_set_volume =
      _wire_set_volumePtr.asFunction<void Function(int, double)>();

  void wire_set_beats_per_bar(
    int port_,
    int value,
  ) {
    return _wire_set_beats_per_bar(
      port_,
      value,
    );
  }

  late final _wire_set_beats_per_barPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32)>>(
          'wire_set_beats_per_bar');
  late final _wire_set_beats_per_bar =
      _wire_set_beats_per_barPtr.asFunction<void Function(int, int)>();

  void wire_get_playhead(
    int port_,
  ) {
    return _wire_get_playhead(
      port_,
    );
  }

  late final _wire_get_playheadPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'wire_get_playhead');
  late final _wire_get_playhead =
      _wire_get_playheadPtr.asFunction<void Function(int)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Uint8 Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
