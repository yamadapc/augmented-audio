name: Linux

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test-rust:
    name: Run unit-tests on rust crates ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          lfs: true
      - uses: Swatinem/rust-cache@v1
      - name: apt-get update
        run: sudo apt-get update
      - name: Install APT dependencies
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: libasound2-dev libssl-dev cmake libfreetype6-dev expat libexpat1-dev libglib2.0-dev libcairo2-dev libpango1.0-dev libatk1.0-dev libgdk-pixbuf2.0-dev libsoup2.4-dev libclang-11-dev libgdk3.0-cil-dev libappindicator3-dev libayatana-appindicator3-dev libgtksourceview-3.0-dev libwebkit2gtk-4.0-dev libx11-xcb-dev libxcb-icccm4-dev libxcb-dri2-0-dev libavahi-client-dev nvidia-utils-465 lame libgtk-3-dev
          version: 1
      - name: Install Rust dependencies
        run: ./scripts/install-ubuntu-rust-dependencies.sh
      - name: Test with coverage
        env:
          COVERALLS_TOKEN: ${{ secrets.COVERALLS_TOKEN }}
        if: ${{ env.COVERALLS_TOKEN != 0 }}
        run: |
          cargo tarpaulin --skip-clean --workspace \
              --features story \
              --coveralls $COVERALLS_TOKEN \
              --out lcov \
              --output-dir ./tarpaulin-report \
              --exclude-files "*crates/vendor/*" \
              --exclude-files "*crates/spikes/*" \
              --exclude-files "*crates/scripts/*" \
              --exclude-files "*crates/augmented/gui/*" \
              --exclude-files "*crates/augmented/application/audio-processor-standalone/examples/*" \
              --exclude-files "*crates/augmented/application/audio-processor-standalone-gui/*" \
              --exclude-files "*crates/augmented/audio/audiounit/*" \
              --exclude-files "*crates/augmented/development/*" \
              --exclude-files "*crates/augmented/data/augmented-midi/midir/*" \
              --exclude-files "*crates/apps/daw/*" \
              --exclude-files "*crates/apps/demo-plugin/*" \
              --exclude-files "*crates/apps/recording_buddy/*" \
              --exclude-files "*crates/apps/tremolo-plugin/*" \
              --exclude-files "*crates/apps/synth/*" \
              --exclude-files "*crates/apps/looper/augmented-codegen/*" \
              --exclude-files "*/bridge_generated.rs" \
              --exclude assert-no-alloc \
              --exclude augmented-ui \
              --exclude audiounit \
              --exclude basedrop \
              --exclude midir \
              --exclude gfx \
              --exclude iced \
              --exclude iced-baseview \
              --exclude iced_audio \
              --exclude libloading \
              --exclude lyon \
              --exclude pathfinder \
              --exclude piet \
              --exclude plotters \
              --exclude skribo \
              --exclude vst \
              --exclude example-iced-xcode-integration \
              --exclude avfaudio-sys \
              --exclude recording_buddy \
              --exclude darwin-webkit \
              --exclude webview-holder \
              --exclude macos-bundle-resources \
      - name: Test
        env:
          COVERALLS_TOKEN: ${{ secrets.COVERALLS_TOKEN }}
        if: ${{ env.COVERALLS_TOKEN == 0 }}
        run: |
          cargo test --workspace \
              --features story \
              --exclude augmented-ui \
              --exclude audiounit \
              --exclude assert-no-alloc \
              --exclude basedrop \
              --exclude midir \
              --exclude gfx \
              --exclude iced \
              --exclude iced-baseview \
              --exclude iced_audio \
              --exclude libloading \
              --exclude lyon \
              --exclude pathfinder \
              --exclude piet \
              --exclude plotters \
              --exclude skribo \
              --exclude vst \
              --exclude example-iced-xcode-integration \
              --exclude avfaudio-sys \
              --exclude recording_buddy \
              --exclude darwin-webkit \
              --exclude webview-holder \
              --exclude macos-bundle-resources \
              -- -Z unstable-options --format json | tee cargo-output.json
          cargo install --force --version 0.1.10 cargo2junit
          mkdir -p junit
          cat cargo-output.json | cargo2junit > junit/results.xml

      - name: Upload tarpaulin report
        uses: actions/upload-artifact@v2
        with:
          name: tarpaulin-report
          path: ./tarpaulin-report

  build-rust:
    name: Build release rust crates ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
        lfs: true
    - uses: Swatinem/rust-cache@v1
    - name: apt-get update
      run: sudo apt-get update
    - name: Install APT dependencies
      uses: awalsh128/cache-apt-pkgs-action@v1
      with:
        packages: libasound2-dev libssl-dev cmake libfreetype6-dev expat libexpat1-dev libglib2.0-dev libcairo2-dev libpango1.0-dev libatk1.0-dev libgdk-pixbuf2.0-dev libsoup2.4-dev libclang-11-dev libgdk3.0-cil-dev libappindicator3-dev libayatana-appindicator3-dev libgtksourceview-3.0-dev libwebkit2gtk-4.0-dev libx11-xcb-dev libxcb-icccm4-dev libxcb-dri2-0-dev libavahi-client-dev nvidia-utils-465 lame libgtk-3-dev
        version: 1
    - name: Install Rust dependencies
      run: ./scripts/install-ubuntu-rust-dependencies.sh
    - name: Build release
      run: |
        cargo build --release --workspace \
            --exclude augmented-ui \
            --exclude audiounit \
            --exclude example-iced-xcode-integration \
            --exclude avfaudio-sys \
            --exclude recording_buddy \
            --exclude darwin-webkit \
            --exclude macos-bundle-resources
    - name: Run snapshot tests
      run: |
        ./scripts/dev.sh test-snapshots
    - name: Upload plugin-host binary
      uses: actions/upload-artifact@v2
      with:
        name: ${{ runner.os }}-plugin-host
        path: ./target/release/plugin-host
    - name: Upload plugin-host-gui2 binary
      uses: actions/upload-artifact@v2
      with:
        name: ${{ runner.os }}-plugin-host-gui2
        path: ./target/release/plugin-host-gui2
    - name: Upload tremolo-plugin dylib
      uses: actions/upload-artifact@v2
      with:
        name: ${{ runner.os }}-libtas_v2-dylib
        path: ./target/release/libtas_v2.dylib

